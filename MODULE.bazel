module(name = "bazel-minimum-example")

###############################################################################
# Bazel now uses Bzlmod by default to manage external dependencies.
# Please consider migrating your external dependencies from WORKSPACE to MODULE.bazel.
#
# For more details, please check https://github.com/bazelbuild/bazel/issues/18958
###############################################################################
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "rules_cc", version = "0.1.1")
bazel_dep(name = "with_cfg.bzl", version = "0.10.1")
bazel_dep(name = "bazel_skylib", version = "1.7.1")
bazel_dep(name = "rules_cue", version = "0.10.0")
bazel_dep(name = "rules_foreign_cc", version = "0.14.0")
bazel_dep(name = "toolchains_arm_gnu", version = "1.0.3")
bazel_dep(name = "nlohmann_json", version = "3.11.3")
bazel_dep(name = "googletest", version = "1.16.0")
bazel_dep(name = "rules_pkg", version = "1.0.1")

# To get "bazelisk fetch" running
bazel_dep(name = "rules_go", version = "0.50.1")

# this helps rules_cue to find the needed go_sdk
# https://dilipkumar.medium.com/build-your-golang-project-using-go-mod-vs-bazel-2b33b31cb2af
go_sdk = use_extension("@rules_go//go:extensions.bzl", "go_sdk")
go_sdk.download(
    goarch = "amd64",
    goos = "linux",
    sdks = {
        # NOTE: In most cases the whole sdks attribute is not needed.
        # There are 2 "common" reasons you might want it:
        #
        # 1. You need to use an modified GO SDK, or an unsupported version
        #    (for example, a beta or release candidate)
        #
        # 2. You want to avoid the dependency on the index file for the
        #    SHA-256 checksums. In this case, You can get the expected
        #    filenames and checksums from https://go.dev/dl/
        "linux_amd64": ("go1.23.3.linux-amd64.tar.gz", "a0afb9744c00648bafb1b90b4aba5bdb86f424f02f9275399ce0c20b93a2c3a8"),
    },
    version = "1.23.3",  # defined by rules_cue -> https://github.com/seh/rules_cue/blob/v0.10.0/MODULE.bazel#L12
)

bazel_dep(name = "gazelle", version = "0.40.0")

go_deps = use_extension(
    "@gazelle//:extensions.bzl",
    "go_deps",
)
go_deps.config(
    debug_mode = True,
    go_env = {
        "GOPROXY": "https://proxy.golang.org",
    },
)

bazel_dep(name = "rules_jvm_external", version = "6.7")

# Work around https://github.com/bazelbuild/bazel/issues/24426.  See
# https://github.com/bazelbuild/bazel-central-registry/pull/3320#issuecomment-2546030208.
# FIXME: Remove once fixed upstream in googletest and abseil-cpp.
bazel_dep(name = "re2", version = "2024-07-02.bcr.1")

# To maybe get sphinx documentation running
bazel_dep(name = "rules_doxygen", version = "2.2.0")

# Functions to help creating repositories
new_local_repository = use_repo_rule("@bazel_tools//tools/build_defs/repo:local.bzl", "new_local_repository")

# aspect_bazel_lib is needed for copying files
bazel_dep(name = "aspect_bazel_lib", version = "2.11.0")

bazel_lib_toolchains = use_extension("@aspect_bazel_lib//lib:extensions.bzl", "toolchains")
bazel_lib_toolchains.jq()
use_repo(bazel_lib_toolchains, "jq_toolchains")

register_toolchains(
    #"@copy_directory_toolchains//:all",
    #"@copy_to_directory_toolchains//:all",
    "@jq_toolchains//:all",
    #"@expand_template_toolchains//:all",
)

####################################
# Pre-built buildifier & buildozer #
####################################
bazel_dep(
    name = "buildifier_prebuilt",
    version = "8.0.1",
)

####################
# Python toolchain #
####################
bazel_dep(name = "rules_python", version = "1.4.1")

# Pin python version used accross all units
python = use_extension("@rules_python//python/extensions:python.bzl", "python")
python.toolchain(
    configure_coverage_tool = False,
    is_default = True,
    python_version = "3.11",
)
use_repo(python, "python_3_11", "python_3_11_host")

# Setup PyPI
pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip")
pip.parse(
    experimental_index_url = "https://pypi.org/simple",
    extra_pip_args = [
        "--disable-pip-version-check",
        "--no-color",
        "--no-cache-dir",
    ],
    hub_name = "bazel_pypi",
    python_interpreter_target = "@python_3_11_host//:bin/python3",
    python_version = "3.11",
    requirements_lock = "//:requirements.txt",
)
use_repo(pip, "bazel_pypi")










